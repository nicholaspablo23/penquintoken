// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract PENQUINToken {
    string public name = "Pen Qui Qui";
    string public symbol = "PENQUIN";
    uint8 public decimals = 18;
    uint256 public totalSupply = 100_000_000_000 * 10 ** uint256(decimals);

    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    address public owner;

    constructor() {
        owner = msg.sender;
        balanceOf[owner] = totalSupply;
        emit Transfer(address(0), owner, totalSupply);
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Not owner");
        _;
    }

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    function transfer(address to, uint256 value) public returns (bool) {
        require(balanceOf[msg.sender] >= value, "Insufficient balance");
        _transfer(msg.sender, to, value);
        return true;
    }

    function approve(address spender, uint256 value) public returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        require(balanceOf[from] >= value, "Insufficient balance");
        require(allowance[from][msg.sender] >= value, "Allowance exceeded");
        allowance[from][msg.sender] -= value;
        _transfer(from, to, value);
        return true;
    }

    function _transfer(address from, address to, uint256 value) internal {
        require(to != address(0), "Invalid address");
        balanceOf[from] -= value;
        balanceOf[to] += value;
        emit Transfer(from, to, value);
    }

    // ETH conversion with 5% burn and safety check
    function convertToETH(uint256 tokenAmount) public {
        require(tokenAmount > 0, "Must convert more than zero tokens");
        require(balanceOf[msg.sender] >= tokenAmount, "Insufficient tokens");

        uint256 burnAmount = tokenAmount * 5 / 100;
        uint256 netAmount = tokenAmount - burnAmount;

        balanceOf[msg.sender] -= tokenAmount;
        balanceOf[BURN_ADDRESS] += burnAmount;

        emit Transfer(msg.sender, BURN_ADDRESS, burnAmount);

        // In a real use case, convert netAmount to ETH (e.g., through Uniswap or presale logic)
        emit Transfer(msg.sender, address(this), netAmount);
    }
}
